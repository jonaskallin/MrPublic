<?xml version="1.1" encoding="UTF-8" standalone="no"?>
<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
                   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                   xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.5.xsd">

    <changeSet author="fuse.team" id="add-jsonb-field-to-metrics-info" objectQuotingStrategy="QUOTE_ONLY_RESERVED_WORDS">
        <renameColumn tableName="metrics_info" oldColumnName="data" newColumnName="legacy_data"/>
        <addColumn tableName="metrics_info">
            <column name="data" type="jsonb"/>
       </addColumn>

        <sql>
            drop procedure IF EXISTS upsert_metrics_info;
        </sql>

        <createProcedure><![CDATA[
            create or replace procedure upsert_metrics_info(
                system_type text,
                system_id uuid,
                metrics_type text,
                "partition" date,
                "timestamp" timestamp,
                "data" jsonb,
                data_digest text,
                labels json,
                rate_seconds bigint,
                remote_timestamp timestamp,
                pull bool,
                failed bool,
                expiration_timestamp timestamp,
                skip_history bool
            )
            language plpgsql as $$

            declare insert_row bool := false;

            begin
                if $14 then
                    -- delete existing metrics
            delete from
                metrics_info mi
            where
                mi.system_type = $1 and
                mi.system_id = $2 and
                mi.metrics_type = $3 and
                mi.partition = $4 and
                mi.timestamp >= mi.partition;

            insert_row := true;
            else
            update
                metrics_info mi
            set
                rate_seconds = $9,
                remote_timestamp = $10,
                expiration_timestamp = $13
            where
                mi.system_type = $1 and
                mi.system_id = $2 and
                mi.metrics_type = $3 and
                mi.partition = $4 and
              -- if data_digest matches, metrics didn't change
                mi.data_digest = $7 and
                mi.pull = $11 and
                mi.failed = $12 and
                mi.timestamp <= $5 and
                mi.expiration_timestamp > $5;

            if not found then
                        insert_row := true;

                        -- ensure that we won't have overlaping metrics
            update
                metrics_info mi
            set
                expiration_timestamp = $5
            where
                mi.system_type = $1 and
                mi.system_id = $2 and
                mi.metrics_type = $3 and
                mi.partition = $4 and
                mi.timestamp <= $5 and
                mi.expiration_timestamp > $5;
            end if;
            end if;

                if insert_row then
                    insert into metrics_info (
                        system_type,
                        system_id,
                        metrics_type,
                        partition,
                        timestamp,
                        data,
                        data_digest,
                        labels,
                        rate_seconds,
                        remote_timestamp,
                        pull,
                        failed,
                        expiration_timestamp
                    )
                    values ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13)
            on conflict do nothing;
            end if;
            end;
            $$;
            ]]></createProcedure>
    </changeSet>

</databaseChangeLog>
